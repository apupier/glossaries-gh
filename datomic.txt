entity
    Feels like maps, but they're actually
    more like multimaps.

    Reverse attributes - inverted index.
    Can get keys from values.

Guava
    Google's Java Library.

    https://github.com/google/guava

multimap
    A Multimap is a new collection type that
    is found in Google's Guava library for
    Java.
    
    A Multimap can store more than one value
    against a key.
    
    Both the keys and the values are stored in
    a collection

datomic
    $NOTES/ws/datomic/factoids.org

perception
    Obtain a queue of transactions.
    - not just your own.

    Query transformations for
    filtering/triggering.

consintent read
    https://youtu.be/9TYfcyvSpEQ?t=2156

conditional put
    https://youtu.be/9TYfcyvSpEQ?t=2156

retract
    [#tx]

    https://youtu.be/9TYfcyvSpEQ?t=2156

assert
    [#tx]

    https://youtu.be/9TYfcyvSpEQ?t=2156

transaction
    Transactions happen on the transactor in
    serial.

    But you parallelise it by pipelining the
    architecture.

    https://youtu.be/7Fi-UvrRpyI?t=2270

HornetQ
    An open-source asynchronous messaging
    project from JBoss. It is an example of
    Message-oriented middleware.

tx-data
transaction data
    - tx-fn(args...)
    - assert
    - retract

    assertions and retractions are the atomic
    units of transactions in an expansion
    process.

    https://youtu.be/9TYfcyvSpEQ?t=2400

transaction function
tx-fn
    (f db & args) -> tx-data

    Send it to the database and it runs there
    using values.

    A function of the 'value of the database'
    and some arguments and it produces other
    tx-data.

    Because tx-fn can return a tx-data, it can
    recall other assertions, retractions and
    maybe other tx-fn.

sorting
    This is how to organise things.

fact
    Facts have a time attribute (actually, a
    transaction ID, because the transaction is
    given the timestamp).

    This is also true in the Latin definition
    for fact -- it has a time.

    https://youtu.be/9TYfcyvSpEQ?t=1353

composite collections
    An entire database can become a value to
    your program.

    It can be as useful and reliable for the
    basis of decision-making as an immutable
    string is.

value
    https://youtu.be/9TYfcyvSpEQ?t=609

    Something that could constitute the basis
    for a decision making process.

    A value never changes.

time-travel
    [features of Datomic]

    - db.asOf()
    - db.history()
    - :db/txInstant

storage service

transactor
    [server]

    https://docs.datomic.com/on-prem/getting-started/dev-setup.html

    Accepts transactions.

    Periodic indexing in the background.

transactor properties file
    Config file for a transactor.

client

datomic peer
peer
    Related:
    - datomic peer server
    - datomic peer library

datomic peer server
peer server
    Have multiple of these if you want.

    Provides an interface for Datomic clients
    to access databases.

    https://docs.datomic.com/on-prem/peer/peer-server.html

    You start a peer server.

    ewwlinks +/"Starting a Peer Server" "https://docs.datomic.com/on-prem/getting-started/dev-setup.html"

    The Datomic Peer Server does not create
    durable-storage databases itself.

    To use a Peer Server along with a dev
    storage database you will need to have
    previously created a database and have a
    running dev Transactor.

datomic peer library
    You can include the peer library into your
    clojure project.

    https://docs.datomic.com/on-prem/peer/integrating-peer-lib.html

    This is how to interact with the datomic
    database.

connection string
    datomic:dev://localhost:4334/<DB-NAME>

    Example:
        datomic:dev://localhost:4334/hello

namespace qualified keyword field
    Example
        :user/name

non-namespace qualified keyword field
    Example:
        :cars

attribute
    Wefine fields stating what their name is
    and what type of data they hold.

    In Datomic nomenclature fields are
    referred to as attributes.

table
    [#RDBMS]

    In datomic, we do away with the concept of
    a table.

    You could say datomic ONLY specifies
    'columns'.

    Additionally, these columns have no
    relationship to (or grouping with) any
    other column.

    Contrast this with an RDBMS which groups
    columns with the concept of a table.

assertion
    Adds a single atomic fact to Datomic.
    Assertions are represented by ordinary
    data structures (lists or maps).

    https://docs.datomic.com/on-prem/tutorial/assertion.html