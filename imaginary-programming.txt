imaginary programming
    To make an analogy, imaginary programming
    is a type of programming much like
    pure-functional, where what is deemed
    'imaginary' is code that has been
    'contaminated' by output from a language
    and behaviour altered by it.

    A distinction is made between grounded and
    non-grounded imaginary programming.

grounded
grounded imaginary programming
non-grounded
    If an imaginary function has the language
    model as a parameter then it is considered
    'grounded'.

    If an imaginary function relies on the
    output of functions that have in the past
    used a language model as a parameter, but
    does not contain a reference to specific
    language model used then it is considered
    'non-grounded'.

    non-grounded code is still code in the way
    that pure functional code is code.

ordinary programming
    Programming with functions that do not
    have an imaginary dimension (they do not
    take a language model as a parameter and
    the result of ordinary code is not
    polluted by a language model).

holographic programming
    [type of imaginary programming]

    This is like imaginary programming but
    where the language models are trained on
    software.

    The code being written, therefore, is
    employing associations made between
    elements of the code, how that code is
    used and how it is described, to build
    applications.

    This lets you code within the hyperspace
    of a language model to enable things like:
    - reflection
    - inference in place of computation