help.
    [query]

    Show help.

    x -sh swipl -e "?-" -s help. -c m -i

pwd.
    [query]

    See your active directory.

cd('/home/shane').
    [query]

    Set your active directory.

constraint logic programming
    A form of constraint programming, in which
    logic programming is extended to include
    concepts from constraint satisfaction.
    
    A constraint logic program is a logic
    program that contains constraints in the
    body of clauses.

declarative reading
concluding reading
    [prolog reading method]

    https://www.metalevel.at/prolog/reading

    Declaratively, Prolog programs state what
    holds.

    A Prolog program consists of clauses, and
    each clause is either a fact or a rule.
    Facts state what is always true. Rules
    state what is true under certain
    conditions.

    A method to reading/understanding prolog
    programs.

    It is easy to explain, understand and use.

    You state what holds under what
    conditions, and the Prolog engine finds
    solutions for you.

    A disadvantage of this approach is that it
    does not explain why logically equivalent
    program variants may exhibit different
    performance or termination
    characteristics.

procedural reading
    [prolog reading method]

    https://www.metalevel.at/prolog/reading

    To complement the declarative approach of
    reading Prolog programs, we can also read
    them procedurally.
    
    This means that we take into account the
    actual computation strategy of the Prolog
    engine.

clause
    Either:
    - fact
    - rule

fact
    State what is always true.

rule
    State what is true under certain
    conditions. 

condition

Prolog
    Extremely well suited for solving
    combinatorial tasks like Sudoku.

    https://www.metalevel.at/sudoku/

predicate
    [#prolog]

    vimlinks +/"magicNumber(7)." "https://learnxinyminutes.com/docs/prolog/"

assignment
    [#prolog]
    [operator]

    5 is X+2.

    Unlike =, the right hand side of IS must
    always be bound, thus guaranteeing no
    attempt to solve an equation.

unification
    [#prolog]
    [operator]

    Essentially a combination of assignment
    and equality.

    vimlinks +/"?- 2 = 3." "https://learnxinyminutes.com/docs/prolog/"

    If both sides are bound (ie, defined),
    check equality.
    2 = 3

    IMPORTANT (the essence of unification):
    If one side is free (ie, undefined),
    assign to match the other side.
    X = 3

    If both sides are free, the assignment is
    remembered. With some luck, one of the two
    sides will eventually be bound, but this
    isn't necessary.
    X = Y are both free, so Prolog remembers
    it. Therefore assigning X will also assign
    Y. IS is another assigment operator in prolog.
    X = Y, X = 2, Z is Y + 3.

    See:
        vim +/"modus ponens" "$NOTES/ws/logic/glossary.txt"

member
    [predicate]

    Fundamental Prolog tool for manipulating
    lists.   